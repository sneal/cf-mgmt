// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmwarepivotallabs/cf-mgmt/envgroup"
)

type FakeCFClient struct {
	GetRunningEnvironmentVariableGroupStub        func() (cfclient.EnvironmentVariableGroup, error)
	getRunningEnvironmentVariableGroupMutex       sync.RWMutex
	getRunningEnvironmentVariableGroupArgsForCall []struct {
	}
	getRunningEnvironmentVariableGroupReturns struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}
	getRunningEnvironmentVariableGroupReturnsOnCall map[int]struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}
	GetStagingEnvironmentVariableGroupStub        func() (cfclient.EnvironmentVariableGroup, error)
	getStagingEnvironmentVariableGroupMutex       sync.RWMutex
	getStagingEnvironmentVariableGroupArgsForCall []struct {
	}
	getStagingEnvironmentVariableGroupReturns struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}
	getStagingEnvironmentVariableGroupReturnsOnCall map[int]struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}
	SetRunningEnvironmentVariableGroupStub        func(cfclient.EnvironmentVariableGroup) error
	setRunningEnvironmentVariableGroupMutex       sync.RWMutex
	setRunningEnvironmentVariableGroupArgsForCall []struct {
		arg1 cfclient.EnvironmentVariableGroup
	}
	setRunningEnvironmentVariableGroupReturns struct {
		result1 error
	}
	setRunningEnvironmentVariableGroupReturnsOnCall map[int]struct {
		result1 error
	}
	SetStagingEnvironmentVariableGroupStub        func(cfclient.EnvironmentVariableGroup) error
	setStagingEnvironmentVariableGroupMutex       sync.RWMutex
	setStagingEnvironmentVariableGroupArgsForCall []struct {
		arg1 cfclient.EnvironmentVariableGroup
	}
	setStagingEnvironmentVariableGroupReturns struct {
		result1 error
	}
	setStagingEnvironmentVariableGroupReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) GetRunningEnvironmentVariableGroup() (cfclient.EnvironmentVariableGroup, error) {
	fake.getRunningEnvironmentVariableGroupMutex.Lock()
	ret, specificReturn := fake.getRunningEnvironmentVariableGroupReturnsOnCall[len(fake.getRunningEnvironmentVariableGroupArgsForCall)]
	fake.getRunningEnvironmentVariableGroupArgsForCall = append(fake.getRunningEnvironmentVariableGroupArgsForCall, struct {
	}{})
	stub := fake.GetRunningEnvironmentVariableGroupStub
	fakeReturns := fake.getRunningEnvironmentVariableGroupReturns
	fake.recordInvocation("GetRunningEnvironmentVariableGroup", []interface{}{})
	fake.getRunningEnvironmentVariableGroupMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetRunningEnvironmentVariableGroupCallCount() int {
	fake.getRunningEnvironmentVariableGroupMutex.RLock()
	defer fake.getRunningEnvironmentVariableGroupMutex.RUnlock()
	return len(fake.getRunningEnvironmentVariableGroupArgsForCall)
}

func (fake *FakeCFClient) GetRunningEnvironmentVariableGroupCalls(stub func() (cfclient.EnvironmentVariableGroup, error)) {
	fake.getRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.getRunningEnvironmentVariableGroupMutex.Unlock()
	fake.GetRunningEnvironmentVariableGroupStub = stub
}

func (fake *FakeCFClient) GetRunningEnvironmentVariableGroupReturns(result1 cfclient.EnvironmentVariableGroup, result2 error) {
	fake.getRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.getRunningEnvironmentVariableGroupMutex.Unlock()
	fake.GetRunningEnvironmentVariableGroupStub = nil
	fake.getRunningEnvironmentVariableGroupReturns = struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetRunningEnvironmentVariableGroupReturnsOnCall(i int, result1 cfclient.EnvironmentVariableGroup, result2 error) {
	fake.getRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.getRunningEnvironmentVariableGroupMutex.Unlock()
	fake.GetRunningEnvironmentVariableGroupStub = nil
	if fake.getRunningEnvironmentVariableGroupReturnsOnCall == nil {
		fake.getRunningEnvironmentVariableGroupReturnsOnCall = make(map[int]struct {
			result1 cfclient.EnvironmentVariableGroup
			result2 error
		})
	}
	fake.getRunningEnvironmentVariableGroupReturnsOnCall[i] = struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetStagingEnvironmentVariableGroup() (cfclient.EnvironmentVariableGroup, error) {
	fake.getStagingEnvironmentVariableGroupMutex.Lock()
	ret, specificReturn := fake.getStagingEnvironmentVariableGroupReturnsOnCall[len(fake.getStagingEnvironmentVariableGroupArgsForCall)]
	fake.getStagingEnvironmentVariableGroupArgsForCall = append(fake.getStagingEnvironmentVariableGroupArgsForCall, struct {
	}{})
	stub := fake.GetStagingEnvironmentVariableGroupStub
	fakeReturns := fake.getStagingEnvironmentVariableGroupReturns
	fake.recordInvocation("GetStagingEnvironmentVariableGroup", []interface{}{})
	fake.getStagingEnvironmentVariableGroupMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetStagingEnvironmentVariableGroupCallCount() int {
	fake.getStagingEnvironmentVariableGroupMutex.RLock()
	defer fake.getStagingEnvironmentVariableGroupMutex.RUnlock()
	return len(fake.getStagingEnvironmentVariableGroupArgsForCall)
}

func (fake *FakeCFClient) GetStagingEnvironmentVariableGroupCalls(stub func() (cfclient.EnvironmentVariableGroup, error)) {
	fake.getStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.getStagingEnvironmentVariableGroupMutex.Unlock()
	fake.GetStagingEnvironmentVariableGroupStub = stub
}

func (fake *FakeCFClient) GetStagingEnvironmentVariableGroupReturns(result1 cfclient.EnvironmentVariableGroup, result2 error) {
	fake.getStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.getStagingEnvironmentVariableGroupMutex.Unlock()
	fake.GetStagingEnvironmentVariableGroupStub = nil
	fake.getStagingEnvironmentVariableGroupReturns = struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetStagingEnvironmentVariableGroupReturnsOnCall(i int, result1 cfclient.EnvironmentVariableGroup, result2 error) {
	fake.getStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.getStagingEnvironmentVariableGroupMutex.Unlock()
	fake.GetStagingEnvironmentVariableGroupStub = nil
	if fake.getStagingEnvironmentVariableGroupReturnsOnCall == nil {
		fake.getStagingEnvironmentVariableGroupReturnsOnCall = make(map[int]struct {
			result1 cfclient.EnvironmentVariableGroup
			result2 error
		})
	}
	fake.getStagingEnvironmentVariableGroupReturnsOnCall[i] = struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroup(arg1 cfclient.EnvironmentVariableGroup) error {
	fake.setRunningEnvironmentVariableGroupMutex.Lock()
	ret, specificReturn := fake.setRunningEnvironmentVariableGroupReturnsOnCall[len(fake.setRunningEnvironmentVariableGroupArgsForCall)]
	fake.setRunningEnvironmentVariableGroupArgsForCall = append(fake.setRunningEnvironmentVariableGroupArgsForCall, struct {
		arg1 cfclient.EnvironmentVariableGroup
	}{arg1})
	stub := fake.SetRunningEnvironmentVariableGroupStub
	fakeReturns := fake.setRunningEnvironmentVariableGroupReturns
	fake.recordInvocation("SetRunningEnvironmentVariableGroup", []interface{}{arg1})
	fake.setRunningEnvironmentVariableGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroupCallCount() int {
	fake.setRunningEnvironmentVariableGroupMutex.RLock()
	defer fake.setRunningEnvironmentVariableGroupMutex.RUnlock()
	return len(fake.setRunningEnvironmentVariableGroupArgsForCall)
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroupCalls(stub func(cfclient.EnvironmentVariableGroup) error) {
	fake.setRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.setRunningEnvironmentVariableGroupMutex.Unlock()
	fake.SetRunningEnvironmentVariableGroupStub = stub
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroupArgsForCall(i int) cfclient.EnvironmentVariableGroup {
	fake.setRunningEnvironmentVariableGroupMutex.RLock()
	defer fake.setRunningEnvironmentVariableGroupMutex.RUnlock()
	argsForCall := fake.setRunningEnvironmentVariableGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroupReturns(result1 error) {
	fake.setRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.setRunningEnvironmentVariableGroupMutex.Unlock()
	fake.SetRunningEnvironmentVariableGroupStub = nil
	fake.setRunningEnvironmentVariableGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroupReturnsOnCall(i int, result1 error) {
	fake.setRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.setRunningEnvironmentVariableGroupMutex.Unlock()
	fake.SetRunningEnvironmentVariableGroupStub = nil
	if fake.setRunningEnvironmentVariableGroupReturnsOnCall == nil {
		fake.setRunningEnvironmentVariableGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setRunningEnvironmentVariableGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroup(arg1 cfclient.EnvironmentVariableGroup) error {
	fake.setStagingEnvironmentVariableGroupMutex.Lock()
	ret, specificReturn := fake.setStagingEnvironmentVariableGroupReturnsOnCall[len(fake.setStagingEnvironmentVariableGroupArgsForCall)]
	fake.setStagingEnvironmentVariableGroupArgsForCall = append(fake.setStagingEnvironmentVariableGroupArgsForCall, struct {
		arg1 cfclient.EnvironmentVariableGroup
	}{arg1})
	stub := fake.SetStagingEnvironmentVariableGroupStub
	fakeReturns := fake.setStagingEnvironmentVariableGroupReturns
	fake.recordInvocation("SetStagingEnvironmentVariableGroup", []interface{}{arg1})
	fake.setStagingEnvironmentVariableGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroupCallCount() int {
	fake.setStagingEnvironmentVariableGroupMutex.RLock()
	defer fake.setStagingEnvironmentVariableGroupMutex.RUnlock()
	return len(fake.setStagingEnvironmentVariableGroupArgsForCall)
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroupCalls(stub func(cfclient.EnvironmentVariableGroup) error) {
	fake.setStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.setStagingEnvironmentVariableGroupMutex.Unlock()
	fake.SetStagingEnvironmentVariableGroupStub = stub
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroupArgsForCall(i int) cfclient.EnvironmentVariableGroup {
	fake.setStagingEnvironmentVariableGroupMutex.RLock()
	defer fake.setStagingEnvironmentVariableGroupMutex.RUnlock()
	argsForCall := fake.setStagingEnvironmentVariableGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroupReturns(result1 error) {
	fake.setStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.setStagingEnvironmentVariableGroupMutex.Unlock()
	fake.SetStagingEnvironmentVariableGroupStub = nil
	fake.setStagingEnvironmentVariableGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroupReturnsOnCall(i int, result1 error) {
	fake.setStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.setStagingEnvironmentVariableGroupMutex.Unlock()
	fake.SetStagingEnvironmentVariableGroupStub = nil
	if fake.setStagingEnvironmentVariableGroupReturnsOnCall == nil {
		fake.setStagingEnvironmentVariableGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setStagingEnvironmentVariableGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRunningEnvironmentVariableGroupMutex.RLock()
	defer fake.getRunningEnvironmentVariableGroupMutex.RUnlock()
	fake.getStagingEnvironmentVariableGroupMutex.RLock()
	defer fake.getStagingEnvironmentVariableGroupMutex.RUnlock()
	fake.setRunningEnvironmentVariableGroupMutex.RLock()
	defer fake.setRunningEnvironmentVariableGroupMutex.RUnlock()
	fake.setStagingEnvironmentVariableGroupMutex.RLock()
	defer fake.setStagingEnvironmentVariableGroupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ envgroup.CFClient = new(FakeCFClient)
