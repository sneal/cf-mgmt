// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/vmwarepivotallabs/cf-mgmt/isosegment"
)

type FakeCFOrganizationClient struct {
	AssignDefaultIsolationSegmentStub        func(context.Context, string, string) error
	assignDefaultIsolationSegmentMutex       sync.RWMutex
	assignDefaultIsolationSegmentArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	assignDefaultIsolationSegmentReturns struct {
		result1 error
	}
	assignDefaultIsolationSegmentReturnsOnCall map[int]struct {
		result1 error
	}
	GetDefaultIsolationSegmentStub        func(context.Context, string) (string, error)
	getDefaultIsolationSegmentMutex       sync.RWMutex
	getDefaultIsolationSegmentArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getDefaultIsolationSegmentReturns struct {
		result1 string
		result2 error
	}
	getDefaultIsolationSegmentReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFOrganizationClient) AssignDefaultIsolationSegment(arg1 context.Context, arg2 string, arg3 string) error {
	fake.assignDefaultIsolationSegmentMutex.Lock()
	ret, specificReturn := fake.assignDefaultIsolationSegmentReturnsOnCall[len(fake.assignDefaultIsolationSegmentArgsForCall)]
	fake.assignDefaultIsolationSegmentArgsForCall = append(fake.assignDefaultIsolationSegmentArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AssignDefaultIsolationSegmentStub
	fakeReturns := fake.assignDefaultIsolationSegmentReturns
	fake.recordInvocation("AssignDefaultIsolationSegment", []interface{}{arg1, arg2, arg3})
	fake.assignDefaultIsolationSegmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFOrganizationClient) AssignDefaultIsolationSegmentCallCount() int {
	fake.assignDefaultIsolationSegmentMutex.RLock()
	defer fake.assignDefaultIsolationSegmentMutex.RUnlock()
	return len(fake.assignDefaultIsolationSegmentArgsForCall)
}

func (fake *FakeCFOrganizationClient) AssignDefaultIsolationSegmentCalls(stub func(context.Context, string, string) error) {
	fake.assignDefaultIsolationSegmentMutex.Lock()
	defer fake.assignDefaultIsolationSegmentMutex.Unlock()
	fake.AssignDefaultIsolationSegmentStub = stub
}

func (fake *FakeCFOrganizationClient) AssignDefaultIsolationSegmentArgsForCall(i int) (context.Context, string, string) {
	fake.assignDefaultIsolationSegmentMutex.RLock()
	defer fake.assignDefaultIsolationSegmentMutex.RUnlock()
	argsForCall := fake.assignDefaultIsolationSegmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFOrganizationClient) AssignDefaultIsolationSegmentReturns(result1 error) {
	fake.assignDefaultIsolationSegmentMutex.Lock()
	defer fake.assignDefaultIsolationSegmentMutex.Unlock()
	fake.AssignDefaultIsolationSegmentStub = nil
	fake.assignDefaultIsolationSegmentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFOrganizationClient) AssignDefaultIsolationSegmentReturnsOnCall(i int, result1 error) {
	fake.assignDefaultIsolationSegmentMutex.Lock()
	defer fake.assignDefaultIsolationSegmentMutex.Unlock()
	fake.AssignDefaultIsolationSegmentStub = nil
	if fake.assignDefaultIsolationSegmentReturnsOnCall == nil {
		fake.assignDefaultIsolationSegmentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.assignDefaultIsolationSegmentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFOrganizationClient) GetDefaultIsolationSegment(arg1 context.Context, arg2 string) (string, error) {
	fake.getDefaultIsolationSegmentMutex.Lock()
	ret, specificReturn := fake.getDefaultIsolationSegmentReturnsOnCall[len(fake.getDefaultIsolationSegmentArgsForCall)]
	fake.getDefaultIsolationSegmentArgsForCall = append(fake.getDefaultIsolationSegmentArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetDefaultIsolationSegmentStub
	fakeReturns := fake.getDefaultIsolationSegmentReturns
	fake.recordInvocation("GetDefaultIsolationSegment", []interface{}{arg1, arg2})
	fake.getDefaultIsolationSegmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFOrganizationClient) GetDefaultIsolationSegmentCallCount() int {
	fake.getDefaultIsolationSegmentMutex.RLock()
	defer fake.getDefaultIsolationSegmentMutex.RUnlock()
	return len(fake.getDefaultIsolationSegmentArgsForCall)
}

func (fake *FakeCFOrganizationClient) GetDefaultIsolationSegmentCalls(stub func(context.Context, string) (string, error)) {
	fake.getDefaultIsolationSegmentMutex.Lock()
	defer fake.getDefaultIsolationSegmentMutex.Unlock()
	fake.GetDefaultIsolationSegmentStub = stub
}

func (fake *FakeCFOrganizationClient) GetDefaultIsolationSegmentArgsForCall(i int) (context.Context, string) {
	fake.getDefaultIsolationSegmentMutex.RLock()
	defer fake.getDefaultIsolationSegmentMutex.RUnlock()
	argsForCall := fake.getDefaultIsolationSegmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFOrganizationClient) GetDefaultIsolationSegmentReturns(result1 string, result2 error) {
	fake.getDefaultIsolationSegmentMutex.Lock()
	defer fake.getDefaultIsolationSegmentMutex.Unlock()
	fake.GetDefaultIsolationSegmentStub = nil
	fake.getDefaultIsolationSegmentReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFOrganizationClient) GetDefaultIsolationSegmentReturnsOnCall(i int, result1 string, result2 error) {
	fake.getDefaultIsolationSegmentMutex.Lock()
	defer fake.getDefaultIsolationSegmentMutex.Unlock()
	fake.GetDefaultIsolationSegmentStub = nil
	if fake.getDefaultIsolationSegmentReturnsOnCall == nil {
		fake.getDefaultIsolationSegmentReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getDefaultIsolationSegmentReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFOrganizationClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assignDefaultIsolationSegmentMutex.RLock()
	defer fake.assignDefaultIsolationSegmentMutex.RUnlock()
	fake.getDefaultIsolationSegmentMutex.RLock()
	defer fake.getDefaultIsolationSegmentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFOrganizationClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ isosegment.CFOrganizationClient = new(FakeCFOrganizationClient)
