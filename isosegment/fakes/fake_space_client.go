// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/vmwarepivotallabs/cf-mgmt/isosegment"
)

type FakeCFSpaceClient struct {
	AssignIsolationSegmentStub        func(context.Context, string, string) error
	assignIsolationSegmentMutex       sync.RWMutex
	assignIsolationSegmentArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	assignIsolationSegmentReturns struct {
		result1 error
	}
	assignIsolationSegmentReturnsOnCall map[int]struct {
		result1 error
	}
	GetAssignedIsolationSegmentStub        func(context.Context, string) (string, error)
	getAssignedIsolationSegmentMutex       sync.RWMutex
	getAssignedIsolationSegmentArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getAssignedIsolationSegmentReturns struct {
		result1 string
		result2 error
	}
	getAssignedIsolationSegmentReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFSpaceClient) AssignIsolationSegment(arg1 context.Context, arg2 string, arg3 string) error {
	fake.assignIsolationSegmentMutex.Lock()
	ret, specificReturn := fake.assignIsolationSegmentReturnsOnCall[len(fake.assignIsolationSegmentArgsForCall)]
	fake.assignIsolationSegmentArgsForCall = append(fake.assignIsolationSegmentArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AssignIsolationSegmentStub
	fakeReturns := fake.assignIsolationSegmentReturns
	fake.recordInvocation("AssignIsolationSegment", []interface{}{arg1, arg2, arg3})
	fake.assignIsolationSegmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFSpaceClient) AssignIsolationSegmentCallCount() int {
	fake.assignIsolationSegmentMutex.RLock()
	defer fake.assignIsolationSegmentMutex.RUnlock()
	return len(fake.assignIsolationSegmentArgsForCall)
}

func (fake *FakeCFSpaceClient) AssignIsolationSegmentCalls(stub func(context.Context, string, string) error) {
	fake.assignIsolationSegmentMutex.Lock()
	defer fake.assignIsolationSegmentMutex.Unlock()
	fake.AssignIsolationSegmentStub = stub
}

func (fake *FakeCFSpaceClient) AssignIsolationSegmentArgsForCall(i int) (context.Context, string, string) {
	fake.assignIsolationSegmentMutex.RLock()
	defer fake.assignIsolationSegmentMutex.RUnlock()
	argsForCall := fake.assignIsolationSegmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFSpaceClient) AssignIsolationSegmentReturns(result1 error) {
	fake.assignIsolationSegmentMutex.Lock()
	defer fake.assignIsolationSegmentMutex.Unlock()
	fake.AssignIsolationSegmentStub = nil
	fake.assignIsolationSegmentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFSpaceClient) AssignIsolationSegmentReturnsOnCall(i int, result1 error) {
	fake.assignIsolationSegmentMutex.Lock()
	defer fake.assignIsolationSegmentMutex.Unlock()
	fake.AssignIsolationSegmentStub = nil
	if fake.assignIsolationSegmentReturnsOnCall == nil {
		fake.assignIsolationSegmentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.assignIsolationSegmentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFSpaceClient) GetAssignedIsolationSegment(arg1 context.Context, arg2 string) (string, error) {
	fake.getAssignedIsolationSegmentMutex.Lock()
	ret, specificReturn := fake.getAssignedIsolationSegmentReturnsOnCall[len(fake.getAssignedIsolationSegmentArgsForCall)]
	fake.getAssignedIsolationSegmentArgsForCall = append(fake.getAssignedIsolationSegmentArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetAssignedIsolationSegmentStub
	fakeReturns := fake.getAssignedIsolationSegmentReturns
	fake.recordInvocation("GetAssignedIsolationSegment", []interface{}{arg1, arg2})
	fake.getAssignedIsolationSegmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSpaceClient) GetAssignedIsolationSegmentCallCount() int {
	fake.getAssignedIsolationSegmentMutex.RLock()
	defer fake.getAssignedIsolationSegmentMutex.RUnlock()
	return len(fake.getAssignedIsolationSegmentArgsForCall)
}

func (fake *FakeCFSpaceClient) GetAssignedIsolationSegmentCalls(stub func(context.Context, string) (string, error)) {
	fake.getAssignedIsolationSegmentMutex.Lock()
	defer fake.getAssignedIsolationSegmentMutex.Unlock()
	fake.GetAssignedIsolationSegmentStub = stub
}

func (fake *FakeCFSpaceClient) GetAssignedIsolationSegmentArgsForCall(i int) (context.Context, string) {
	fake.getAssignedIsolationSegmentMutex.RLock()
	defer fake.getAssignedIsolationSegmentMutex.RUnlock()
	argsForCall := fake.getAssignedIsolationSegmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFSpaceClient) GetAssignedIsolationSegmentReturns(result1 string, result2 error) {
	fake.getAssignedIsolationSegmentMutex.Lock()
	defer fake.getAssignedIsolationSegmentMutex.Unlock()
	fake.GetAssignedIsolationSegmentStub = nil
	fake.getAssignedIsolationSegmentReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceClient) GetAssignedIsolationSegmentReturnsOnCall(i int, result1 string, result2 error) {
	fake.getAssignedIsolationSegmentMutex.Lock()
	defer fake.getAssignedIsolationSegmentMutex.Unlock()
	fake.GetAssignedIsolationSegmentStub = nil
	if fake.getAssignedIsolationSegmentReturnsOnCall == nil {
		fake.getAssignedIsolationSegmentReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAssignedIsolationSegmentReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assignIsolationSegmentMutex.RLock()
	defer fake.assignIsolationSegmentMutex.RUnlock()
	fake.getAssignedIsolationSegmentMutex.RLock()
	defer fake.getAssignedIsolationSegmentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFSpaceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ isosegment.CFSpaceClient = new(FakeCFSpaceClient)
