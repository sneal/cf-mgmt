// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry-community/go-cfclient/v3/client"
	"github.com/cloudfoundry-community/go-cfclient/v3/resource"
	"github.com/vmwarepivotallabs/cf-mgmt/privatedomain"
)

type FakeCFDomainClient struct {
	CreateStub        func(context.Context, *resource.DomainCreate) (*resource.Domain, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 *resource.DomainCreate
	}
	createReturns struct {
		result1 *resource.Domain
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *resource.Domain
		result2 error
	}
	DeleteStub        func(context.Context, string) (string, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteReturns struct {
		result1 string
		result2 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ListAllStub        func(context.Context, *client.DomainListOptions) ([]*resource.Domain, error)
	listAllMutex       sync.RWMutex
	listAllArgsForCall []struct {
		arg1 context.Context
		arg2 *client.DomainListOptions
	}
	listAllReturns struct {
		result1 []*resource.Domain
		result2 error
	}
	listAllReturnsOnCall map[int]struct {
		result1 []*resource.Domain
		result2 error
	}
	ListForOrganizationAllStub        func(context.Context, string, *client.DomainListOptions) ([]*resource.Domain, error)
	listForOrganizationAllMutex       sync.RWMutex
	listForOrganizationAllArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *client.DomainListOptions
	}
	listForOrganizationAllReturns struct {
		result1 []*resource.Domain
		result2 error
	}
	listForOrganizationAllReturnsOnCall map[int]struct {
		result1 []*resource.Domain
		result2 error
	}
	ShareStub        func(context.Context, string, string) (*resource.ToManyRelationships, error)
	shareMutex       sync.RWMutex
	shareArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	shareReturns struct {
		result1 *resource.ToManyRelationships
		result2 error
	}
	shareReturnsOnCall map[int]struct {
		result1 *resource.ToManyRelationships
		result2 error
	}
	UnShareStub        func(context.Context, string, string) error
	unShareMutex       sync.RWMutex
	unShareArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	unShareReturns struct {
		result1 error
	}
	unShareReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFDomainClient) Create(arg1 context.Context, arg2 *resource.DomainCreate) (*resource.Domain, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 *resource.DomainCreate
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFDomainClient) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeCFDomainClient) CreateCalls(stub func(context.Context, *resource.DomainCreate) (*resource.Domain, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeCFDomainClient) CreateArgsForCall(i int) (context.Context, *resource.DomainCreate) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFDomainClient) CreateReturns(result1 *resource.Domain, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *resource.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDomainClient) CreateReturnsOnCall(i int, result1 *resource.Domain, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *resource.Domain
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *resource.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDomainClient) Delete(arg1 context.Context, arg2 string) (string, error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFDomainClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCFDomainClient) DeleteCalls(stub func(context.Context, string) (string, error)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeCFDomainClient) DeleteArgsForCall(i int) (context.Context, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFDomainClient) DeleteReturns(result1 string, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDomainClient) DeleteReturnsOnCall(i int, result1 string, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDomainClient) ListAll(arg1 context.Context, arg2 *client.DomainListOptions) ([]*resource.Domain, error) {
	fake.listAllMutex.Lock()
	ret, specificReturn := fake.listAllReturnsOnCall[len(fake.listAllArgsForCall)]
	fake.listAllArgsForCall = append(fake.listAllArgsForCall, struct {
		arg1 context.Context
		arg2 *client.DomainListOptions
	}{arg1, arg2})
	stub := fake.ListAllStub
	fakeReturns := fake.listAllReturns
	fake.recordInvocation("ListAll", []interface{}{arg1, arg2})
	fake.listAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFDomainClient) ListAllCallCount() int {
	fake.listAllMutex.RLock()
	defer fake.listAllMutex.RUnlock()
	return len(fake.listAllArgsForCall)
}

func (fake *FakeCFDomainClient) ListAllCalls(stub func(context.Context, *client.DomainListOptions) ([]*resource.Domain, error)) {
	fake.listAllMutex.Lock()
	defer fake.listAllMutex.Unlock()
	fake.ListAllStub = stub
}

func (fake *FakeCFDomainClient) ListAllArgsForCall(i int) (context.Context, *client.DomainListOptions) {
	fake.listAllMutex.RLock()
	defer fake.listAllMutex.RUnlock()
	argsForCall := fake.listAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFDomainClient) ListAllReturns(result1 []*resource.Domain, result2 error) {
	fake.listAllMutex.Lock()
	defer fake.listAllMutex.Unlock()
	fake.ListAllStub = nil
	fake.listAllReturns = struct {
		result1 []*resource.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDomainClient) ListAllReturnsOnCall(i int, result1 []*resource.Domain, result2 error) {
	fake.listAllMutex.Lock()
	defer fake.listAllMutex.Unlock()
	fake.ListAllStub = nil
	if fake.listAllReturnsOnCall == nil {
		fake.listAllReturnsOnCall = make(map[int]struct {
			result1 []*resource.Domain
			result2 error
		})
	}
	fake.listAllReturnsOnCall[i] = struct {
		result1 []*resource.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDomainClient) ListForOrganizationAll(arg1 context.Context, arg2 string, arg3 *client.DomainListOptions) ([]*resource.Domain, error) {
	fake.listForOrganizationAllMutex.Lock()
	ret, specificReturn := fake.listForOrganizationAllReturnsOnCall[len(fake.listForOrganizationAllArgsForCall)]
	fake.listForOrganizationAllArgsForCall = append(fake.listForOrganizationAllArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *client.DomainListOptions
	}{arg1, arg2, arg3})
	stub := fake.ListForOrganizationAllStub
	fakeReturns := fake.listForOrganizationAllReturns
	fake.recordInvocation("ListForOrganizationAll", []interface{}{arg1, arg2, arg3})
	fake.listForOrganizationAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFDomainClient) ListForOrganizationAllCallCount() int {
	fake.listForOrganizationAllMutex.RLock()
	defer fake.listForOrganizationAllMutex.RUnlock()
	return len(fake.listForOrganizationAllArgsForCall)
}

func (fake *FakeCFDomainClient) ListForOrganizationAllCalls(stub func(context.Context, string, *client.DomainListOptions) ([]*resource.Domain, error)) {
	fake.listForOrganizationAllMutex.Lock()
	defer fake.listForOrganizationAllMutex.Unlock()
	fake.ListForOrganizationAllStub = stub
}

func (fake *FakeCFDomainClient) ListForOrganizationAllArgsForCall(i int) (context.Context, string, *client.DomainListOptions) {
	fake.listForOrganizationAllMutex.RLock()
	defer fake.listForOrganizationAllMutex.RUnlock()
	argsForCall := fake.listForOrganizationAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFDomainClient) ListForOrganizationAllReturns(result1 []*resource.Domain, result2 error) {
	fake.listForOrganizationAllMutex.Lock()
	defer fake.listForOrganizationAllMutex.Unlock()
	fake.ListForOrganizationAllStub = nil
	fake.listForOrganizationAllReturns = struct {
		result1 []*resource.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDomainClient) ListForOrganizationAllReturnsOnCall(i int, result1 []*resource.Domain, result2 error) {
	fake.listForOrganizationAllMutex.Lock()
	defer fake.listForOrganizationAllMutex.Unlock()
	fake.ListForOrganizationAllStub = nil
	if fake.listForOrganizationAllReturnsOnCall == nil {
		fake.listForOrganizationAllReturnsOnCall = make(map[int]struct {
			result1 []*resource.Domain
			result2 error
		})
	}
	fake.listForOrganizationAllReturnsOnCall[i] = struct {
		result1 []*resource.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDomainClient) Share(arg1 context.Context, arg2 string, arg3 string) (*resource.ToManyRelationships, error) {
	fake.shareMutex.Lock()
	ret, specificReturn := fake.shareReturnsOnCall[len(fake.shareArgsForCall)]
	fake.shareArgsForCall = append(fake.shareArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ShareStub
	fakeReturns := fake.shareReturns
	fake.recordInvocation("Share", []interface{}{arg1, arg2, arg3})
	fake.shareMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFDomainClient) ShareCallCount() int {
	fake.shareMutex.RLock()
	defer fake.shareMutex.RUnlock()
	return len(fake.shareArgsForCall)
}

func (fake *FakeCFDomainClient) ShareCalls(stub func(context.Context, string, string) (*resource.ToManyRelationships, error)) {
	fake.shareMutex.Lock()
	defer fake.shareMutex.Unlock()
	fake.ShareStub = stub
}

func (fake *FakeCFDomainClient) ShareArgsForCall(i int) (context.Context, string, string) {
	fake.shareMutex.RLock()
	defer fake.shareMutex.RUnlock()
	argsForCall := fake.shareArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFDomainClient) ShareReturns(result1 *resource.ToManyRelationships, result2 error) {
	fake.shareMutex.Lock()
	defer fake.shareMutex.Unlock()
	fake.ShareStub = nil
	fake.shareReturns = struct {
		result1 *resource.ToManyRelationships
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDomainClient) ShareReturnsOnCall(i int, result1 *resource.ToManyRelationships, result2 error) {
	fake.shareMutex.Lock()
	defer fake.shareMutex.Unlock()
	fake.ShareStub = nil
	if fake.shareReturnsOnCall == nil {
		fake.shareReturnsOnCall = make(map[int]struct {
			result1 *resource.ToManyRelationships
			result2 error
		})
	}
	fake.shareReturnsOnCall[i] = struct {
		result1 *resource.ToManyRelationships
		result2 error
	}{result1, result2}
}

func (fake *FakeCFDomainClient) UnShare(arg1 context.Context, arg2 string, arg3 string) error {
	fake.unShareMutex.Lock()
	ret, specificReturn := fake.unShareReturnsOnCall[len(fake.unShareArgsForCall)]
	fake.unShareArgsForCall = append(fake.unShareArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UnShareStub
	fakeReturns := fake.unShareReturns
	fake.recordInvocation("UnShare", []interface{}{arg1, arg2, arg3})
	fake.unShareMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFDomainClient) UnShareCallCount() int {
	fake.unShareMutex.RLock()
	defer fake.unShareMutex.RUnlock()
	return len(fake.unShareArgsForCall)
}

func (fake *FakeCFDomainClient) UnShareCalls(stub func(context.Context, string, string) error) {
	fake.unShareMutex.Lock()
	defer fake.unShareMutex.Unlock()
	fake.UnShareStub = stub
}

func (fake *FakeCFDomainClient) UnShareArgsForCall(i int) (context.Context, string, string) {
	fake.unShareMutex.RLock()
	defer fake.unShareMutex.RUnlock()
	argsForCall := fake.unShareArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFDomainClient) UnShareReturns(result1 error) {
	fake.unShareMutex.Lock()
	defer fake.unShareMutex.Unlock()
	fake.UnShareStub = nil
	fake.unShareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFDomainClient) UnShareReturnsOnCall(i int, result1 error) {
	fake.unShareMutex.Lock()
	defer fake.unShareMutex.Unlock()
	fake.UnShareStub = nil
	if fake.unShareReturnsOnCall == nil {
		fake.unShareReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unShareReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFDomainClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.listAllMutex.RLock()
	defer fake.listAllMutex.RUnlock()
	fake.listForOrganizationAllMutex.RLock()
	defer fake.listForOrganizationAllMutex.RUnlock()
	fake.shareMutex.RLock()
	defer fake.shareMutex.RUnlock()
	fake.unShareMutex.RLock()
	defer fake.unShareMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFDomainClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ privatedomain.CFDomainClient = new(FakeCFDomainClient)
