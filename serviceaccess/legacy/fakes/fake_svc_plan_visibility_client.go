// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry-community/go-cfclient/v3/resource"
	"github.com/vmwarepivotallabs/cf-mgmt/serviceaccess/legacy"
)

type FakeCFServicePlanVisibilityClient struct {
	ApplyStub        func(context.Context, string, *resource.ServicePlanVisibility) (*resource.ServicePlanVisibility, error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *resource.ServicePlanVisibility
	}
	applyReturns struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}
	applyReturnsOnCall map[int]struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}
	DeleteStub        func(context.Context, string, string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(context.Context, string) (*resource.ServicePlanVisibility, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getReturns struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}
	UpdateStub        func(context.Context, string, *resource.ServicePlanVisibility) (*resource.ServicePlanVisibility, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *resource.ServicePlanVisibility
	}
	updateReturns struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFServicePlanVisibilityClient) Apply(arg1 context.Context, arg2 string, arg3 *resource.ServicePlanVisibility) (*resource.ServicePlanVisibility, error) {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *resource.ServicePlanVisibility
	}{arg1, arg2, arg3})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1, arg2, arg3})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFServicePlanVisibilityClient) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeCFServicePlanVisibilityClient) ApplyCalls(stub func(context.Context, string, *resource.ServicePlanVisibility) (*resource.ServicePlanVisibility, error)) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *FakeCFServicePlanVisibilityClient) ApplyArgsForCall(i int) (context.Context, string, *resource.ServicePlanVisibility) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFServicePlanVisibilityClient) ApplyReturns(result1 *resource.ServicePlanVisibility, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFServicePlanVisibilityClient) ApplyReturnsOnCall(i int, result1 *resource.ServicePlanVisibility, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 *resource.ServicePlanVisibility
			result2 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFServicePlanVisibilityClient) Delete(arg1 context.Context, arg2 string, arg3 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFServicePlanVisibilityClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCFServicePlanVisibilityClient) DeleteCalls(stub func(context.Context, string, string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeCFServicePlanVisibilityClient) DeleteArgsForCall(i int) (context.Context, string, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFServicePlanVisibilityClient) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFServicePlanVisibilityClient) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFServicePlanVisibilityClient) Get(arg1 context.Context, arg2 string) (*resource.ServicePlanVisibility, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFServicePlanVisibilityClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeCFServicePlanVisibilityClient) GetCalls(stub func(context.Context, string) (*resource.ServicePlanVisibility, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeCFServicePlanVisibilityClient) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFServicePlanVisibilityClient) GetReturns(result1 *resource.ServicePlanVisibility, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFServicePlanVisibilityClient) GetReturnsOnCall(i int, result1 *resource.ServicePlanVisibility, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *resource.ServicePlanVisibility
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFServicePlanVisibilityClient) Update(arg1 context.Context, arg2 string, arg3 *resource.ServicePlanVisibility) (*resource.ServicePlanVisibility, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *resource.ServicePlanVisibility
	}{arg1, arg2, arg3})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFServicePlanVisibilityClient) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeCFServicePlanVisibilityClient) UpdateCalls(stub func(context.Context, string, *resource.ServicePlanVisibility) (*resource.ServicePlanVisibility, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeCFServicePlanVisibilityClient) UpdateArgsForCall(i int) (context.Context, string, *resource.ServicePlanVisibility) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFServicePlanVisibilityClient) UpdateReturns(result1 *resource.ServicePlanVisibility, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFServicePlanVisibilityClient) UpdateReturnsOnCall(i int, result1 *resource.ServicePlanVisibility, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *resource.ServicePlanVisibility
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *resource.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFServicePlanVisibilityClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFServicePlanVisibilityClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ legacy.CFServicePlanVisibilityClient = new(FakeCFServicePlanVisibilityClient)
